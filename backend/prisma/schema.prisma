// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  username              String    @unique
  passwordHash          String
  firstName             String?
  lastName              String?
  avatarUrl             String?
  bio                   String?
  locationPreferences   Json?
  activityPreferences   Json?
  emailVerified         Boolean   @default(false)
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  locations             Location[]
  reviews               Review[]
  bookmarks             Bookmark[]
  trips                 Trip[]
  createdEvents         Event[]   @relation("EventOrganizer")

  @@map("users")
}

model Location {
  id                    String    @id @default(cuid())
  name                  String
  description           String?
  locationType          String    // 'camping', 'hiking', 'biking', 'kayaking', 'photography'
  latitude              Float
  longitude             Float
  address               String?
  city                  String?
  state                 String?
  country               String    @default("US")
  elevation             Int?
  terrainType           String?   // 'mountain', 'forest', 'desert', 'coastal', 'lake', 'river'
  climateZone           String?   // 'temperate', 'arctic', 'tropical', 'desert', 'mediterranean'
  amenities             Json?
  costPerNight          Decimal?
  maxCapacity           Int?
  petFriendly           Boolean   @default(false)
  reservationRequired   Boolean   @default(false)
  seasonStart           DateTime?
  seasonEnd             DateTime?
  difficultyLevel       Int?      // 1-5
  safetyNotes           String?
  regulations           String?
  contactInfo           Json?
  websiteUrl            String?
  images                Json?
  verified              Boolean   @default(false)
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  createdBy             User?     @relation(fields: [createdById], references: [id])
  createdById           String?
  activities            Activity[]
  reviews               Review[]
  bookmarks             Bookmark[]
  events                Event[]
  tripLocations         TripLocation[]
  weatherData           WeatherData[]
  categories            LocationCategory[]

  @@map("locations")
}

model Activity {
  id                    String    @id @default(cuid())
  locationId            String
  activityType          String    // 'hiking', 'mountain_biking', 'kayaking', 'photography', 'climbing'
  name                  String
  description           String?
  distanceMiles         Decimal?
  elevationGain         Int?
  difficultyLevel       Int?      // 1-5
  estimatedDurationHours Decimal?
  equipmentRequired     Json?
  bestSeason            String?
  trailConditions       String?
  highlights            String?
  safetyConsiderations  String?
  latitude              Float?
  longitude             Float?
  images                Json?
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  location              Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  reviews               Review[]
  bookmarks             Bookmark[]
  tripLocations         TripLocation[]

  @@map("activities")
}

model Event {
  id                    String    @id @default(cuid())
  locationId            String?
  organizerId           String
  title                 String
  description           String?
  eventType             String    // 'meetup', 'guided_tour', 'workshop', 'competition', 'festival'
  startDate             DateTime
  endDate               DateTime?
  maxParticipants       Int?
  currentParticipants   Int       @default(0)
  cost                  Decimal?
  equipmentProvided     Json?
  skillLevel            String?
  ageRestriction        String?
  registrationDeadline  DateTime?
  contactInfo           Json?
  images                Json?
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  location              Location? @relation(fields: [locationId], references: [id])
  organizer             User      @relation("EventOrganizer", fields: [organizerId], references: [id])
  reviews               Review[]
  bookmarks             Bookmark[]

  @@map("events")
}

model Review {
  id                    String    @id @default(cuid())
  userId                String
  locationId            String?
  activityId            String?
  eventId               String?
  rating                Int       // 1-5
  title                 String?
  content               String?
  visitDate             DateTime?
  images                Json?
  helpfulVotes          Int       @default(0)
  isVerified            Boolean   @default(false)
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  location              Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)
  activity              Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)
  event                 Event?    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, locationId, activityId, eventId])
  @@map("reviews")
}

model Bookmark {
  id                    String    @id @default(cuid())
  userId                String
  locationId            String?
  activityId            String?
  eventId               String?
  notes                 String?
  createdAt             DateTime  @default(now())

  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  location              Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)
  activity              Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)
  event                 Event?    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, locationId, activityId, eventId])
  @@map("bookmarks")
}

model Trip {
  id                    String    @id @default(cuid())
  userId                String
  name                  String
  description           String?
  startDate             DateTime?
  endDate               DateTime?
  status                String    @default("planning") // 'planning', 'confirmed', 'completed', 'cancelled'
  totalCost             Decimal?
  participants          Json?
  itinerary             Json?
  packingList           Json?
  notes                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tripLocations         TripLocation[]

  @@map("trips")
}

model TripLocation {
  id                    String    @id @default(cuid())
  tripId                String
  locationId            String
  activityId            String?
  visitDate             DateTime?
  durationHours         Decimal?
  notes                 String?
  createdAt             DateTime  @default(now())

  // Relations
  trip                  Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade)
  location              Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  activity              Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@map("trip_locations")
}

model WeatherData {
  id                    String    @id @default(cuid())
  locationId            String
  date                  DateTime  @db.Date
  temperatureHigh       Int?
  temperatureLow        Int?
  precipitationChance   Int?
  windSpeed             Int?
  conditions            String?
  uvIndex               Int?
  createdAt             DateTime  @default(now())

  // Relations
  location              Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@unique([locationId, date])
  @@map("weather_data")
}

model Category {
  id                    String    @id @default(cuid())
  name                  String    @unique
  description           String?
  icon                  String?
  color                 String?
  parentId              String?
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())

  // Relations
  parent                Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children              Category[] @relation("CategoryHierarchy")
  locations             LocationCategory[]

  @@map("categories")
}

model LocationCategory {
  locationId            String
  categoryId            String

  // Relations
  location              Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  category              Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([locationId, categoryId])
  @@map("location_categories")
}
